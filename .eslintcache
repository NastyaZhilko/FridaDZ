[{"E:\\plan\\friday_ignatdz\\src\\store\\new-password-reducer.ts":"1","E:\\plan\\friday_ignatdz\\src\\api\\api.tsx":"2","E:\\plan\\friday_ignatdz\\src\\components\\pages\\new-password.tsx":"3","E:\\plan\\friday_ignatdz\\src\\components\\routes\\Routes.tsx":"4","E:\\plan\\friday_ignatdz\\src\\store\\registration-reducer.ts":"5","E:\\plan\\friday_ignatdz\\src\\components\\pages\\registration.tsx":"6","E:\\plan\\friday_ignatdz\\src\\components\\pages\\password-recovery.tsx":"7"},{"size":1652,"mtime":1613127348650,"results":"8","hashOfConfig":"9"},{"size":1545,"mtime":1613127348428,"results":"10","hashOfConfig":"9"},{"size":3953,"mtime":1613132622066,"results":"11","hashOfConfig":"9"},{"size":1792,"mtime":1613138105217,"results":"12","hashOfConfig":"9"},{"size":2389,"mtime":1613140481897,"results":"13","hashOfConfig":"9"},{"size":3991,"mtime":1613141522065,"results":"14","hashOfConfig":"9"},{"size":1337,"mtime":1613141691224,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fdvesh",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"E:\\plan\\friday_ignatdz\\src\\store\\new-password-reducer.ts",[],"E:\\plan\\friday_ignatdz\\src\\api\\api.tsx",[],"E:\\plan\\friday_ignatdz\\src\\components\\pages\\new-password.tsx",["32","33"],"import React, {ChangeEvent, useState} from \"react\";\r\nimport SuperInputText from \"../common/SuperInput/SuperInput\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport style from \"./new-password.module.css\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../store/store\";\r\nimport {errorAC, newPasswordTC} from \"../../store/new-password-reducer\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\nfunction NewPassword() {\r\n    const dispatch = useDispatch()\r\n    const isNewPasswordSet = useSelector<AppStoreType, boolean>(state => state.newPassword.isNewPasswordSet)\r\n    const error = useSelector<AppStoreType, boolean>(state => state.newPassword.isError)\r\n    const titleError = useSelector<AppStoreType, string | null>(state => state.newPassword.titleError)\r\n    const {resetPasswordToken} = useParams<{ resetPasswordToken: string }>();\r\n    const [passwordLength, setPasswordLength] = useState(true)\r\n    const [passwordLengthDub, setPasswordLengthDub] = useState(true)\r\n    const [passwordError, setPasswordError] = useState(false)\r\n    const [passwordErrorDub, setPasswordErrorDub] = useState(false)\r\n    const [buttonColor, setButtonColor] = useState('')\r\n\r\n    const onSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        const password = e.target.password.value\r\n        const repeatPassword = e.target.repeatPassword.value\r\n        password === repeatPassword\r\n            ? dispatch(newPasswordTC(password, resetPasswordToken))\r\n            : dispatch(errorAC('Not equal'))\r\n\r\n    }\r\n    console.log(resetPasswordToken)\r\n    const changePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //console.log(e.currentTarget.value.length)\r\n        if (e.currentTarget.value.length >= 7) {\r\n            setPasswordLength(false)\r\n            setPasswordError(false)\r\n            setButtonColor('blue')\r\n        } else {\r\n            setPasswordLength(true)\r\n            setButtonColor('')\r\n        }\r\n    }\r\n    const changePasswordDub = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //console.log(e.currentTarget.value.length)\r\n        if (e.currentTarget.value.length >= 7) {\r\n            setPasswordLengthDub(false)\r\n            setPasswordErrorDub(false)\r\n            setButtonColor('blue')\r\n        } else {\r\n            setPasswordLengthDub(true)\r\n            setButtonColor('')\r\n        }\r\n    }\r\n\r\n    const onblur = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //console.log(e.target.value)\r\n        if (e.currentTarget.value.length < 7) {\r\n            setPasswordError(true)\r\n        }\r\n    }\r\n    const onblurDub = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //console.log(e.target.value)\r\n        if (e.currentTarget.value.length < 7) {\r\n            setPasswordErrorDub(true)\r\n        }\r\n    }\r\n\r\n    if (isNewPasswordSet) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div className={style.container}>\r\n                <h3>Set password</h3>\r\n                <SuperInputText type='password' name='password' placeholder=\"New password\" onChange={changePassword}\r\n                                onBlur={onblur}/>\r\n                {passwordError && <div style={{color: \"red\"}}>{'Password must be more than 7 characters...'}</div>}\r\n\r\n                <SuperInputText type='password' name='repeatPassword' placeholder=\"Confirm new password\"\r\n                                onChange={changePasswordDub} onBlur={onblurDub}/>\r\n                {passwordErrorDub && <div style={{color: \"red\"}}>{'Password must be more than 7 characters...'}</div>}\r\n\r\n                <SuperButton type=\"submit\" disabled={passwordLength || passwordLengthDub}\r\n                             style={{background: buttonColor}}>\r\n                    Change password\r\n                </SuperButton>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NewPassword;","E:\\plan\\friday_ignatdz\\src\\components\\routes\\Routes.tsx",["34","35"],"E:\\plan\\friday_ignatdz\\src\\store\\registration-reducer.ts",[],"E:\\plan\\friday_ignatdz\\src\\components\\pages\\registration.tsx",["36"],"E:\\plan\\friday_ignatdz\\src\\components\\pages\\password-recovery.tsx",["37","38","39","40"],"import React, {ChangeEvent} from \"react\";\r\nimport SuperInputText from \"../common/SuperInput/SuperInput\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport style from \"./password-recovery.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../store/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {passwordRecoveryTC} from \"../../store/password-recovery-reducer\";\r\n\r\nfunction PasswordRecovery() {\r\n    const dispatch = useDispatch()\r\n    //const isMailSend = useSelector<AppStoreType, boolean>(state => state.passwordRecovery.isMessageSend)\r\n\r\n    const sendMail =(e:any)=>{\r\n        e.preventDefault();\r\n        const email = e.target.email.value\r\n       // alert(email)\r\n        dispatch(passwordRecoveryTC(email))\r\n\r\n    }\r\n  /*  if (isMailSend) {\r\n        return <Redirect to={'/login'}/>\r\n    }*/\r\n    return (\r\n        <form onSubmit={sendMail}>\r\n        <div>\r\n            <h3>Password recovery</h3>\r\n            <div className={style.container}>\r\n                <SuperInputText name={'email'}  placeholder=\"Email\"/>\r\n                <span>Enter your email</span>\r\n                <SuperButton>\r\n                    Send\r\n                </SuperButton>\r\n            </div>\r\n        </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PasswordRecovery;",{"ruleId":"41","severity":1,"message":"42","line":14,"column":11,"nodeType":"43","messageId":"44","endLine":14,"endColumn":16},{"ruleId":"41","severity":1,"message":"45","line":15,"column":11,"nodeType":"43","messageId":"44","endLine":15,"endColumn":21},{"ruleId":"41","severity":1,"message":"46","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":9},{"ruleId":"47","severity":1,"message":"48","line":32,"column":52,"nodeType":"49","endLine":35,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":62,"column":85,"nodeType":"52","messageId":"53","endLine":62,"endColumn":87},{"ruleId":"41","severity":1,"message":"54","line":1,"column":16,"nodeType":"43","messageId":"44","endLine":1,"endColumn":27},{"ruleId":"41","severity":1,"message":"55","line":5,"column":22,"nodeType":"43","messageId":"44","endLine":5,"endColumn":33},{"ruleId":"41","severity":1,"message":"56","line":6,"column":9,"nodeType":"43","messageId":"44","endLine":6,"endColumn":21},{"ruleId":"41","severity":1,"message":"57","line":7,"column":9,"nodeType":"43","messageId":"44","endLine":7,"endColumn":17},"@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'titleError' is assigned a value but never used.","'s' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ChangeEvent' is defined but never used.","'useSelector' is defined but never used.","'AppStoreType' is defined but never used.","'Redirect' is defined but never used."]